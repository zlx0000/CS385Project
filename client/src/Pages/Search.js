import React, { useEffect, useState } from "react";

// Writing our own functions for use in our app
// Writing a comment about a specific number.
/*
function writeNumberAsWords(n) {
  let nAsStr = n.toString(10); // our number is in base 10
  let digits = nAsStr.length; // number of digits
  let firstDigit = nAsStr.charAt(0);

  let message = "nothing";
  if (digits === 9) {
    message = "(At least " + firstDigit + " hundred million!)";
  } else if (digits === 10) {
    message = "(At least " + firstDigit + " billion!)";
  } else {
    message = "(Lots of streams)";
  }

  return message;
}
*/

// Parent component - App
function Search() {
  // lets keep the searchTerm as a state varaiable
  // searchTerm is given an initial value of empty string
  const [searchTerm, setSearchTerm] = useState("");
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  function getItem() {
    fetch('http://45.77.38.37')
      .then(response => {
        return response.text();
      })
      .then(data => {
        setData(data);
      });
  }

  function createItem() {
    let itemname = "";
    let email = "";
    fetch('http://45.77.38.37/itemdata', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({itemname, email}),
    })
      .then(response => {
        return response.text();
      })
      .then(data => {
        alert(data);
        //getItem();
      });
  }

  useEffect(() => {
    const URL = "http://45.77.38.37";

    async function fetchitemData() {
      try {
        const response = await fetch(URL);
        const itemDataJson = await response.json(); // wait for the JSON response
        setLoading(true);
        // IMPORTANT - look at the JSON response - look at the structure
        // This is where many errors occur!
        setData(itemDataJson);
      } catch (error) {
        setError(error); // take the error message from the system
        setLoading(false);
      } // end try-catch block
    } // end of fetchData
    fetchitemData();
  }, []);
  if (error) {
    return <h1>Opps! An error has occurred: {error.toString()}</h1>;
  } else if (loading === false) {
    return <h1>Waiting for the  data ...... waiting....</h1>;
  } else {
    return (
      <>
        <h1>This is the Search Page</h1>
        {/* <p>Your current search term is [{searchTerm}]</p> */}
        <form>
          <h4>Type your search here: </h4>
          <input onChange={onSearchFormChange} type="text" />
        </form>
        <hr />
        <ResultsComponent
          searchTermFromParent={searchTerm}
          arrayFromParent={data}
        />
      </>
    );
  }
  // Here is our textbox handler function.
  // This handles the event that is fired when
  // the search form (text box) changes
  function onSearchFormChange(event) {
    // An event is generated by Javascript.
    // We use the hook setSearchTerm to safely assign
    // the current value in the textbox to searchTerm
    setSearchTerm(event.target.value);
  }
}

// This is the child component. It is used to display the results
// of the searches conducted. The parent must provide the searchTerm
// and access to the array of JSON objects.

function ResultsComponent(props) {
  // Within this component or function we create our
  // filter function. It will be needed to conduct
  // the search of the array of JSON objects.

  function filterFunction(searchTerm) {
    return function (data) {
      // convert everything to lower case for string matching
      // let itemName = data.itemname.toLowerCase();
      let itemName = data.itemname;

//      let itemType = items.item.itemType.toLowerCase();
      return (
        searchTerm !== "" &&
        (itemName.includes(searchTerm))
        // (itemName.includes(searchTerm.toLowerCase()))

      );
    };
  }
  // We can use the filter function to tell us how many search results
  // we have. We find the length of the filtered array

  let numberResults = props.arrayFromParent.filter(
    filterFunction(props.searchTermFromParent)
  ).length;

  return (
    <>
      <h1>Search Results</h1>
      <h2>There are {numberResults} search results </h2>
      {numberResults === 0 && <p>No results</p>}
      {numberResults > 0 && numberResults < 10 && <p>Some results, not many</p>}
      {numberResults > 10 && <p>Lots of results</p>}
      {props.arrayFromParent
        .filter(filterFunction(props.searchTermFromParent))
        .map((a, index) => (
          <p key={index}>
            Name:<b>{a.itemname}</b>, Type:<i>{a.category}</i>, Price:{a.price}{" "}
          </p>
        ))}
    </>
  );
} // end of child component for results.
export default Search;